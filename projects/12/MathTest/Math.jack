// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array twoToThe;
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        do Math.fillArray();
        return;
    }

    function void fillArray(){
        var int i, toPush;
        let i = 0;
        let toPush = 1;
        while(i < 16){
            let twoToThe[i] = toPush;
            let toPush = toPush + toPush;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        return Math.multiplyAbs(x,y);
    }

    function ind multiplyAbs(int x, int y){
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < 16){
            if(~(Math.bit(y, i))){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i){
        if (x & twoToThe[i] = 0){
            return true;
        }
        return false;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, result;

        if((x > 0) & (y > 0)){let result = Math.divideAbs(x,y);}
        else {
            let absX = Math.abs(x);
            let absY = Math.abs(y);
            let result = Math.divideAbs(absX, absY);
            let result = -result;
        }

        return result;
    }

    function int divideAbs(int x, int y){
        var int q, result, toCheck;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        
        let q = Math.divideAbs(x, Math.multiply(2, y));
        
        let toCheck = Math.multiply(2,q);
        let toCheck = Math.multiply(toCheck,y);
        let toCheck = x - toCheck;
        let result = Math.multiply(2, q);
        if(~(toCheck < y)){
            let result = result + 1;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, toCheck;
        let y = 0;
        let j = 7;
        while(~(j < 0)){
            let toCheck = y + twoToThe[j];
            let toCheck = Math.multiply(toCheck, toCheck);
            if ((~(toCheck > x)) & (toCheck > 0)){
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }
}
