// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int allocatedLen;

    static int NEWLINE;
    static int BACKSPACE;
    static int DOUBLEQUOTE;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0){
            let str = Array.new(maxLength);
            let length = 0;
            let allocatedLen = maxLength;
        }

        let NEWLINE = 128;
        let BACKSPACE = 129;
        let DOUBLEQUOTE = 34;
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (length > 0){do str.dispose();}
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < 0){return 0;}
        if(j>allocatedLen){return 0;} 
        
        return str[j];
    }

    /** Sets thecharacter at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < 0){return;}
        if(~(j < allocatedLen)){return;} 
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < allocatedLen){
            let str[length] = c;
            let length = length + 1;
        }
        
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0){let length = length - 1;}
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var bool isNegative;
        var int i, val, intVal;
        
        let isNegative = false;
        let i = 0;
        let val = 0;

        if(str[0] = 45){
            let isNegative = true;
            let i = i + 1;
        }

        while(i < length){
            let val = val * 10;
            let intVal = str[i] - 48;
            let val = val + intVal;
            let i = i + 1;     
        }

        if(isNegative){
            return -val;
        }
        
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int toSet;
        
        let toSet = Math.abs(val);
        while(length > 0){
            do eraseLastChar();
        }
        if(val < 0){
            do appendChar(45);
        }
        do rec(toSet);
        return;
            
    }

    method String rec(int val){
        var String res;
        var int lastDigit, n;
        
        if(val < 10){
            return appendChar(val + 48);
        }
        
        let n = Math.divide(val,10);
        let n = Math.multiply(n, 10);
        let lastDigit = val - n;
        let res = rec(Math.divide(val,10));
        return res.appendChar(lastDigit + 48);
    }


    /** Returns the new line character. */
    function char newLine() {

        return NEWLINE;
    }

    /** Returns the backspace character. */
    function char backSpace() {

        return BACKSPACE;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {

        return DOUBLEQUOTE;
    }
}
