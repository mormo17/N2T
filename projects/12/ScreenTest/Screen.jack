// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    
    static Array twoToThe;
    static boolean pixelColor;
    static int SCREEN;
    static int KBD;
    
    /** Initializes the Screen. */
    function void init() {
        let SCREEN = 16384;
        let KBD = 24576;
        let pixelColor = true;
        let twoToThe = Array.new(16);
        do Screen.fillArray();
        return;
    }

    function void fillArray(){
        var int i, toPush;
        let i = 0;
        let toPush = 1;
        while(i < 16){
            let twoToThe[i] = toPush;
            let toPush = toPush + toPush;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = SCREEN;
        while(i < KBD){
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }


    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let pixelColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod;

        let address = 32 * y + (x/16);
        let value = Memory.peek(SCREEN + address);
        let mod = x - ((x / 16) * 16);
        if(pixelColor){ // black
            let value = twoToThe[mod] | value; 
        }else{ // white
            let value = (~twoToThe[mod]) & value;
        }

        do Memory.poke(SCREEN + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, tmp;
        
        if (y1 = y2){
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }
        
        if(x1 = x2){
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if(x1 > x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let diff = 0;

        while((~(a > dx)) & (~(b > dy))){
            if(y2 > y1){
                do Screen.drawPixel(x1 + a, y1 + b);
            } else{
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            if(diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }
            else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2){    
        if(x1 > x2){
           do Screen.drawHorizontalLineHelper(y, x2, x1);
        } else{
            do Screen.drawHorizontalLineHelper(y, x1, x2);
        }
        return;
    }

    function void drawHorizontalLineHelper(int y, int x1, int x2){
        var int n, i;
        let n = x2 - x1;
        let i = 0;
        while(~(i > n)){
            do Screen.drawPixel(x1 + i, y);
            let i = i + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        if(y1 > y2){
            do Screen.drawVerticalLineHelper(x, y2, y1);
        }else{
            do Screen.drawVerticalLineHelper(x, y1, y2);
        }
        return;
    }

    function void drawVerticalLineHelper(int x, int y1, int y2){
        var int n, i;
        let n = y2 - y1;
        let i = 0;
        while(~(i > n)){
            do Screen.drawPixel(x, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, n;
        let i = 0;
        let n = y2 - y1;
        while(i < n){
            do Screen.drawHorizontalLine(y1+i, x1, x2);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int leftX, leftY, rightX, rightY, tmpY, dy, z, lowerBound;
        
        let tmpY = y - r;
        let lowerBound = y + r;
        while(~(tmpY > lowerBound)){
            let dy = y - tmpY;
            let z = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));  
            let leftX = x - z;
            let rightX = x + z;
            do Screen.drawHorizontalLine(tmpY, leftX, rightX);
            let tmpY = tmpY + 1;
        }

        return;
    }
}
